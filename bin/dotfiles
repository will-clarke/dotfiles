##### -*- mode:shell-script -*-
#!/bin/bash

# dotfiles download  #=> download
# dotfiles install   #=> install stuff from Brewfile (`brew bundle`)
# dotfiles link      #=> link dotfile from ~/.dotfile
# dotfiles backup    #=> link dotfile to ~/.dotfile
# dotfiles revert    #=> revert from latest backup
# dotfiles setup     #=> run scripts to setup stuff
# dotfiles           #=> download & backup & link & setup\n\n"

set -e    # Exit immediately if a command exits with a non-zero status.


DOTFILES_DIR="$HOME/.dotfiles_william_clarke"
BACKUP_DIR="$DOTFILES_DIR/backup"

function clone_repo {
    if [ ! -d $DOTFILES_DIR ]; then
        git clone https://github.com/will-clarke/dotfiles.git "$DOTFILES_DIR"
    else
        $(cd $DOTFILES_DIR && git pull)
    fi
}
function files_for_home_dir {
    find -L "$DOTFILES_DIR" -type f -maxdepth 1 \
         ! -name "Brewfile" \
         ! -name "readme*" \
         ! -name ".*" \
         -print0 | xargs -0 basename
}
declare -A unusual_files=(
    ["Brewfile"]=".brewfile/Brewfile"
    ["applications/karabiner/karabiner-json"]=".karabiner.d/configuration/karabiner.json"
)

now_backup_dir="$BACKUP_DIR/$(date "+%Y-%m-%d%--%H:%M:%S")"

function set_latest_backup_dir {
    latest_backup_dir=$(find "$BACKUP_DIR/*" -prune -print0 | xargs -0 basename | head -n 1)
}

function backup_home_dir {
    local backup_directory="$1"
    for file in "$files_for_home_dir"; do
        if [ -f "$HOME/.$file" && -d "$backup_directory" ]; then
            echo "Backing up old ~/.$file"
            mv "$HOME/.$file" "$backup_directory"
        fi
    done
}

function backup_unusual_files {
    local backup_directory="$1"
    for file in "${!unusual_files[@]}"; do
        dotfiles_path="$HOME/$file"
        backup_path="$BACKUP_DIR/${unusual_files[$file]}"
        if [ -f "$HOME/$working_path"]; then
            echo "Backing up old $HOME/$working_path"
            mkdir -p $(dirname "$backup_path")
            mv "$HOME/$working_path" "$backup_path"
        fi
    done
}

function backup {
    local backup_dir="$now_backup_dir"
    mkdir -p "$backup_dir"
    backup_home_dir "$backup_dir"
    backup_unusual_files "$backup_dir"
}

function link_home_dir {
    for file in "$files_for_home_dir"; do
        if [! -f "$HOME/.$file"]; then
            echo "Linking new ~/.$file"
            ln -s "$DOTFILES_DIR/$file" "$HOME/.$file"
        fi
    done
}

function link_unusual_files {
    for file in "${!unusual_files[@]}"; do
        dotfiles_path="$DOTFILES_DIR/$file"
        working_path="$HOME/${unusual_files[$file]}"
        if [ ! -f "$working_path"]; then
            mkdir -p $(dirname "$working_path")
            ln -s "$dotfiles_path" "$working_path"
        fi
    done
}

function link {
    link_home_dir
    link_unusual_files
}

function install {
    clone_repo
    backup
    link
}

# # backup
# for file in "${!unusual_files[@]}"; do
#     dotfiles_path="$file"
#     working_path="${unusual_files[$file]}"
#     echo "$dotfiles_path -> $working_path"
# done

# values = echo "${unusual_files[@]}"
# keys = echo "${!unusual_files[@]}"


# brew install bash, you can change the default shell safely by:

function add_line_to_file {
    # adds a line to a file if it doesn't already exist - and will use sudo if required
    local line=$1
    local path=$2
    if ! grep -Fxq "$line" "$path" &> /dev/null; then
        mkdir -p $(dirname $path)
        touch $path
        if [ -w "$path" ]; then
            echo "$line" >> "$path"
        else
            echo "$line" | sudo tee -a "$path"
        fi
    fi
}
# update to latest bash & make default
add_line_to_file "/usr/local/bin/bash" "/etc/shells"
chsh -s /usr/local/bin/bash


function dotfiles_help {
    printf "\nUsage:\n
dotfiles download  #=> download
dotfiles install   #=> install stuff from Brewfile (`brew bundle`)
dotfiles link      #=> link dotfile from ~/.dotfile
dotfiles backup    #=> link dotfile to ~/.dotfile
dotfiles revert    #=> revert from latest backup
dotfiles           #=> download & & backup & link\n\n"
}

function install_homebrew {
    if ! command -v brew >/dev/null; then
        fancy_echo "Installing Homebrew ..."
        curl -fsS \
             'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
        export PATH="/usr/local/bin:$PATH"
    else
        fancy_echo "You've already got Homebrew..."
    fi
}

function gem_install_or_update {
    if gem list "$1" --installed > /dev/null; then
        fancy_echo "Updating %s ..." "$1"
        gem update "$@"
    else
        fancy_echo "Installing %s ..." "$1"
        gem install "$@"
        rbenv rehash
    fi
}

    if [ ! -d  "$HOME/dotfiles" ]; then
        git clone "https://github.com/wmmc/dotfiles" "$HOME/dotfiles"
    fi

function install_osx_tweaks {
    defaults write -g ApplePressAndHoldEnabled -bool false
    defaults write -g InitialKeyRepeat -int 15 # normal minimum is 15 (225 ms)
    defaults write -g KeyRepeat -int 1 # normal minimum is 2 (30 ms)
}

function install_comfy_setup {
    if [ -f "$HOME/dotfiles/applications/karabiner/karabiner-import.sh" ]; then
        bash ~/dotfiles/applications/karabiner/karabiner-import.sh
    fi
}

function install_totally_pointless_stuff {
}


function install_emacs {
    if [ ! -e "$HOME/.emacs.d" ]; then
        git clone --recursive https://github.com/syl20bnr/spacemacs "$HOME/.emacs.d"
    fi
}

function install_emacs_extensions {
    mkdir -p "$HOME/" .mail/{gmail,snaptrip}
    (mbsync -a && mu index --maildir="$HOME/.mail" &) || fancy_echo "Can't grab mail"
    mkdir -p "$HOME/.certificates"
    touch "$HOME/.certificates/gmail.crt"
    cert=$(openssl s_client -connect imap.gmail.com:993 -showcerts 2>&1 < /dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sed -ne '1,/-END CERTIFICATE-/p')
    cert_exists=$(grep -c -- "$cert" "$HOME/.certificates/gmail.crt")
    if [ "$cert_exists" -lt 5 ]; then
        printf "\n$cert" >> "$HOME/.certificates/gmail.crt"
        echo "Updating certificates"
    fi
}

function install_everything {
    install_essentials
    install_emacs
    install_emacs_extensions
    install_db
    install_unix_stuff
    install_ruby
    # install_rust
    # install_scala
    install_javascript_stuff
    install_comfy_setup
    install_totally_pointless_stuff
    install_vim
    install_osx_tweaks
}

function intro {
    fancy_echo "Hey!
You're a few steps away from setting up EVERYTHING!"
}

function should_we_install_everything {
    fancy_echo "Should we just install everything else?
[yes/no]"
    read -r resp
    if [ "$resp" = "y" ] || [ "$resp" = "yes" ]; then
        fancy_echo "Okay. We'll update it all!"
        install_everything
    else
        fancy_echo "Okay. Choose what you want:"
    fi
}

function cleanup {
    fancy_echo "Updating Homebrew formulas ..."
    brew update
    brew cleanup
    brew cask cleanup
    fancy_echo "Running brew doctor"
    brew doctor
    fancy_echo "Thanks. It's been a blast."
}

function brew_install_everything {
    cd "$HOME"
    intro
    should_we_install_everything
    install_essentials
    cleanup
}

function download {
    mkdir -p "$HOME/Dropbox/dev/dotfiles"
    safe_link "$HOME/Dropbox/dev/dotfiles" "$HOME/dotfiles"
    if [ ! -e "$HOME/dotfiles/bin/dotfiles" ]; then
        git clone "https://github.com/wmmc/dotfiles" "$HOME/dotfiles"
    else
        fancy_echo "Already got my dotfiles :D"
    fi
    link_dropbox_files
    link_dotfiles
}

function safe_link {
    source_file="$1"
    target_file="$2"
    if [ -e "$source_file" ] && [ ! -e "$target_file" ]; then
        ln -s "$source_file" "$target_file"
    fi
}

function link_dropbox_files {
    fancy_echo "Linking dropbox with stuff"
    # todo: refactor:
    mkdir -p "$HOME/Dropbox/dev/org"
    mkdir -p "$HOME/Dropbox/dev/secrets"
    safe_link "$HOME/Dropbox/dev" "$HOME/dev"
    mkdir -p "$HOME/Dropbox/dev/dotfiles"
    safe_link "$HOME/Dropbox/dev/dotfiles" "$HOME/dotfiles"
    safe_link "$HOME/Dropbox/org" "$HOME/org"
    secrets=("authinfo.gpg" "certificates" "secrets.gpg")
    for secret in "${secrets[@]}"
    do
        safe_link "$HOME/Dropbox/dev/secrets/$secret" "$HOME/.$secret"
    done
}

function main {
    if [ "$1" == "link" ]; then
        link_dropbox_files && link_dotfiles
    elif [ "$1" == "download" ]; then
        download
    elif [ "$1" == "install" ] || [ "$1" == "brew" ]; then
        brew_install_everything
    else
        dotfiles_help
    fi
}


clone_repo

backup_existing_files

brew linkapps
brew bundle
main "$1"

# install files
# install apps
# uninstall files
# uninstall apps
