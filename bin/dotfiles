##### -*- mode:shell-script -*-
#!/bin/bash

# link dotfiles with dropbox????

set -e    # Exit immediately if a command exits with a non-zero status.

function dotfiles_help {
    echo "
Usage:

dotfiles download   #=> download
dotfiles backup     #=> backup all files which could be overwritten
dotfiles link       #=> link dotfile from ~/.dotfile
dotfiles brew       #=> install from Brewfile
dotfiles setup      #=> setup other stuff
dotfiles revert     #=> revert from latest backup
dotfiles install    #=> download & backup & link & brew & setup

"
}

# BASH 4 ENFORCEMENT!
#################################################################################
function install_homebrew {
    if ! command -v brew >/dev/null; then
        curl -fsS 'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
        export PATH="/usr/local/bin:$PATH"
    fi
}
function add_line_to_file {
    # adds a line to a file if it doesn't already exist - and will use sudo if required
    local line=$1
    local path=$2
    if ! grep -Fxq "$line" "$path" &> /dev/null; then
        mkdir -p "$(dirname "$path")"
        if [ -w "$path" ]; then
            touch "$path"
            echo "$line" >> "$path"
        else
            sudo touch "$path"
            echo "$line" | sudo tee -a "$path"
        fi
    fi
}
function make_new_bash_default {
    add_line_to_file "/usr/local/bin/bash" "/etc/shells"
    chsh -s /usr/local/bin/bash
}
function enforce_new_bash {
    if [ "$(echo "$BASH_VERSION" | head -c 1)" -lt 4 ]; then
        install_homebrew
        brew install bash
        make_new_bash_default
        echo 'Please rerun this command in a new shell (running bash 4)'
        exit 0
    fi
}
enforce_new_bash
# DEFINITIONS
#################################################################################
DOTFILES_DIR="$HOME/.dotfiles_william_clarke"
BACKUP_DIR="$DOTFILES_DIR/backup"
declare -A unusual_files=(
    ["applications/karabiner/karabiner-json"]=".karabiner.d/configuration/karabiner.json")
declare -A dropbox_files=(
    ["Dropbox/dev"]="dev"
    ["Dropbox/dev/dotfiles"]="dotfiles"
    ["Dropbox/org"]="org"
    ["Dropbox/dev/secrets/authinfo.gpg"]=".authinfo.gpg"
    ["Dropbox/dev/secrets/certificates"]=".certificates"
    ["Dropbox/dev/secrets/secrets.gpg"]=".secrets.gpg"
)
# BACKUP
#################################################################################
function backup {
    local local_backup_dir
    local_backup_dir="$BACKUP_DIR/$(date "+%Y-%m-%d%--%H:%M:%S")"
    mkdir -p "$local_backup_dir"
    backup_home_dir "$local_backup_dir"
    backup_unusual_files "$local_backup_dir"
}
function backup_home_dir {
    local backup_directory="$1"
    for file in $(files_for_home_dir); do
        if [ -f "$HOME/.$file" ] && [ -d "$backup_directory" ]; then
            echo "Backing up old ~/.$file"
            mv "$HOME/.$file" "$backup_directory"
        fi
    done
}
function backup_unusual_files {
    local backup_directory="$1"
    for file in "${!unusual_files[@]}"; do
        local working_file="$HOME/$file"
        local backup_path="$BACKUP_DIR/${unusual_files[$file]}"
        if [ -f "$HOME/$working_file" ]; then
            echo "Backing up old ~/$working_file"
            mkdir -p "$(dirname "$backup_path")"
            mv "$HOME/$working_file" "$backup_path"
        fi
    done
}
# LINK
#################################################################################
function link {
    link_home_dir
    link_other_files
    link_dropbox_files
}
function link_home_dir {
    for file in $(files_for_home_dir); do
        if [ -f "$DOTFILES_DIR/$file" ] && [ ! -f "$HOME/.$file" ]; then
            echo "Linking new ~/.$file"
            ln -s "$DOTFILES_DIR/$file" "$HOME/.$file"
        else
            echo "Cannot link ~/.$file"
        fi
    done
}
function link_other_files {
    for file in "${!unusual_files[@]}"; do
        local dotfiles_path="$DOTFILES_DIR/$file"
        local working_path="$HOME/${unusual_files[$file]}"
        if [ -f "$dotfiles_path" ] && [ ! -f "$working_path" ]; then
            mkdir -p "$(dirname "$working_path")"
            ln -s "$dotfiles_path" "$working_path"
        fi
    done
}
function link_dropbox_files {
    for file in "${!dropbox_files[@]}"; do
        local dotfiles_path="$DOTFILES_DIR/$file"
        local working_path="$HOME/${dropbox_files[$file]}"
        if [ -f "$dotfiles_path" ] && [ ! -f "$working_path" ]; then
            mkdir -p "$(dirname "$working_path")"
            ln -s "$dotfiles_path" "$working_path"
        fi
    done
}
# REVERT
#################################################################################
function revert {
    latest_backup_dir=$(find "$BACKUP_DIR/*" -prune -print0 | xargs -0 basename | head -n 1)
    revert_home_dir "$latest_backup_dir"
    revert_unusual_files "$latest_backup_dir"
    revert_dropbox_files "$latest_backup_dir"
}
function revert_home_dir {
    backup_dir="$1"
    for file in $(files_for_home_dir); do
        if [ ! -f "$HOME/.$file" ]; then
            cp "$backup_dir/$file" "$HOME/.$file"
        else
            echo "Cannot revert ~/.$file to $(basename "$backup_dir") -- it already exists"
        fi
    done
}
function revert_dropbox_files {
    backup_dir="$1"
    for file in "${!dropbox_files[@]}"; do
        symlinked_dropbox_file="$HOME/${dropbox_files[$file]}"
        if [ -f "$symlinked_dropbox_file" ]; then
            echo "Removed dropbox symlink: $symlinked_dropbox_file"
            rm "$symlinked_dropbox_file"
        fi
    done
    }
function revert_unusual_files {
    backup_dir="$1"
    for file in "${!unusual_files[@]}"; do
        backup_file="$backup_dir/$file"
        working_file="$HOME/${unusual_files[$file]}"
        if [ ! -f "$working_file" ]; then
            cp "$backup_file" "$working_file"
        else
            echo "Cannot revert $working_file to $(basename "$backup_file") -- it already exists"
        fi
    done

}
# INSTALL
#################################################################################
function download {
    if [ ! -d "$DOTFILES_DIR" ]; then
        git clone https://github.com/will-clarke/dotfiles.git "$DOTFILES_DIR"
    else
        (cd "$DOTFILES_DIR" && git pull)
    fi
}
function files_for_home_dir {
    find -L "$DOTFILES_DIR"/* -maxdepth 1 \
         ! -name "readme*" \
         ! -name ".*" \
         -print0 | xargs -0 basename
}
# SETUP
#################################################################################
function setup {
    setup_apple_defaults
    setup_spacemacs
    setup_emails
    }
function setup_apple_defaults {
    defaults write -g ApplePressAndHoldEnabled -bool false
    defaults write -g InitialKeyRepeat -int 15 # normal minimum is 15 (225 ms)
    defaults write -g KeyRepeat -int 1 # normal minimum is 2 (30 ms)
    defaults write -g AppleShowAllFiles -bool true
}
function setup_spacemacs {
    if [ ! -d "$HOME/.emacs.d" ]; then
        git clone --recursive https://github.com/syl20bnr/spacemacs "$HOME/.emacs.d"
    fi
}
function setup_emails {
    mkdir -p "$HOME/" .mail/gmail
    (mbsync -a && mu index --maildir="$HOME/.mail" &) || echo "Can't grab mail"
    mkdir -p "$HOME/.certificates"
    touch "$HOME/.certificates/gmail.crt"
    cert=$(openssl s_client -connect imap.gmail.com:993 -showcerts 2>&1 < /dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sed -ne '1,/-END CERTIFICATE-/p')
    cert_exists=$(grep -c -- "$cert" "$HOME/.certificates/gmail.crt")
    if [ "$cert_exists" -lt 5 ]; then
        printf "\n%s", "$cert" >> "$HOME/.certificates/gmail.crt"
        echo "Updating certificates"
    fi
}
# BREW
#################################################################################
function brew_bundle {
    if [ ! -w /usr/local ]; then
        # sudo chown -R $(whoami) /usr/local/var/homebrew
        sudo chown -R $(whoami):admin /usr/local
    fi
    EMACS=$(which emacs) brew bundle --global
}
# INSTALL
#################################################################################
function install {
    install_homebrew
    download
    backup
    link
    brew_bundle
    setup
}
# MAIN
#m################################################################################
function main {
    if [ "$1" == "download" ]; then
        download
    elif [ "$1" == "backup" ]; then
        backup
    elif [ "$1" == "link" ]; then
        link
    elif [ "$1" == "brew" ]; then
        install_homebrew
        brew_bundle
    elif [ "$1" == "setup" ]; then
        setup
    elif [ "$1" == "revert" ]; then
        revert
    elif [ "$1" == "install" ]; then
        install
    else
        dotfiles_help
    fi
}

main "$1"
