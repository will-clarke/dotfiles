##### -*- mode:shell-script -*-
#!/bin/bash

set -e

function files_to_link {
    find -L "$HOME/dotfiles" -type f -maxdepth 1 \
         ! -name "Brewfile" \
         ! -name "readme*" \
         ! -name ".*" \
         -print0 | xargs -0 basename
}

function link_dotfiles {
    fancy_echo "Linking dotfiles"
    for file in $(files_to_link)
    do
        link_dotfile "$file"
    done
}

function link_dotfile {
    if [ -e "$HOME/.$1" ]; then
        fancy_echo "$1 exists"
    else
        ln -s "$HOME/dotfiles/$1" "$HOME/.$1"
    fi
}

function fancy_echo {
    local fmt="$1"; shift
    printf "\n$fmt\n" "$@"
}

function dotfiles_help {
    fancy_echo "Usage:

dotfiles download  #=> download the repo & link
dotfiles install   #=> brew install stuff
dotfiles link      #=> link dotfile to ~/.dotfile\n"
}

function install_homebrew {
    if ! command -v brew >/dev/null; then
        fancy_echo "Installing Homebrew ..."
        curl -fsS \
             'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
        export PATH="/usr/local/bin:$PATH"
    else
        fancy_echo "You've already got Homebrew..."
    fi
}

function gem_install_or_update {
    if gem list "$1" --installed > /dev/null; then
        fancy_echo "Updating %s ..." "$1"
        gem update "$@"
    else
        fancy_echo "Installing %s ..." "$1"
        gem install "$@"
        rbenv rehash
    fi
}

    if [ ! -d  "$HOME/dotfiles" ]; then
        git clone "https://github.com/wmmc/dotfiles" "$HOME/dotfiles"
    fi

function install_osx_tweaks {
    defaults write -g ApplePressAndHoldEnabled -bool false
    defaults write -g InitialKeyRepeat -int 15 # normal minimum is 15 (225 ms)
    defaults write -g KeyRepeat -int 1 # normal minimum is 2 (30 ms)
}

function install_comfy_setup {
    if [ -f "$HOME/dotfiles/applications/karabiner/karabiner-import.sh" ]; then
        bash ~/dotfiles/applications/karabiner/karabiner-import.sh
    fi
}

function install_totally_pointless_stuff {
}


function install_emacs {
    if [ ! -e "$HOME/.emacs.d" ]; then
        git clone --recursive https://github.com/syl20bnr/spacemacs "$HOME/.emacs.d"
    fi
}

function install_emacs_extensions {
    mkdir -p "$HOME/" .mail/{gmail,snaptrip}
    (mbsync -a && mu index --maildir="$HOME/.mail" &) || fancy_echo "Can't grab mail"
    mkdir -p "$HOME/.certificates"
    touch "$HOME/.certificates/gmail.crt"
    cert=$(openssl s_client -connect imap.gmail.com:993 -showcerts 2>&1 < /dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sed -ne '1,/-END CERTIFICATE-/p')
    cert_exists=$(grep -c -- "$cert" "$HOME/.certificates/gmail.crt")
    if [ "$cert_exists" -lt 5 ]; then
        printf "\n$cert" >> "$HOME/.certificates/gmail.crt"
        echo "Updating certificates"
    fi
}

function install_everything {
    install_essentials
    install_emacs
    install_emacs_extensions
    install_db
    install_unix_stuff
    install_ruby
    # install_rust
    # install_scala
    install_javascript_stuff
    install_comfy_setup
    install_totally_pointless_stuff
    install_vim
    install_osx_tweaks
}

function intro {
    fancy_echo "Hey!
You're a few steps away from setting up EVERYTHING!"
}

function should_we_install_everything {
    fancy_echo "Should we just install everything else?
[yes/no]"
    read -r resp
    if [ "$resp" = "y" ] || [ "$resp" = "yes" ]; then
        fancy_echo "Okay. We'll update it all!"
        install_everything
    else
        fancy_echo "Okay. Choose what you want:"
    fi
}

function cleanup {
    fancy_echo "Updating Homebrew formulas ..."
    brew update
    brew cleanup
    brew cask cleanup
    fancy_echo "Running brew doctor"
    brew doctor
    fancy_echo "Thanks. It's been a blast."
}

function brew_install_everything {
    cd "$HOME"
    intro
    should_we_install_everything
    install_essentials
    cleanup
}

function download {
    mkdir -p "$HOME/Dropbox/dev/dotfiles"
    safe_link "$HOME/Dropbox/dev/dotfiles" "$HOME/dotfiles"
    if [ ! -e "$HOME/dotfiles/bin/dotfiles" ]; then
        git clone "https://github.com/wmmc/dotfiles" "$HOME/dotfiles"
    else
        fancy_echo "Already got my dotfiles :D"
    fi
    link_dropbox_files
    link_dotfiles
}

function safe_link {
    source_file="$1"
    target_file="$2"
    if [ -e "$source_file" ] && [ ! -e "$target_file" ]; then
        ln -s "$source_file" "$target_file"
    fi
}

function link_dropbox_files {
    fancy_echo "Linking dropbox with stuff"
    # todo: refactor:
    mkdir -p "$HOME/Dropbox/dev/org"
    mkdir -p "$HOME/Dropbox/dev/secrets"
    safe_link "$HOME/Dropbox/dev" "$HOME/dev"
    mkdir -p "$HOME/Dropbox/dev/dotfiles"
    safe_link "$HOME/Dropbox/dev/dotfiles" "$HOME/dotfiles"
    safe_link "$HOME/Dropbox/org" "$HOME/org"
    secrets=("authinfo.gpg" "certificates" "secrets.gpg")
    for secret in "${secrets[@]}"
    do
        safe_link "$HOME/Dropbox/dev/secrets/$secret" "$HOME/.$secret"
    done
}

function main {
    if [ "$1" == "link" ]; then
        link_dropbox_files && link_dotfiles
    elif [ "$1" == "download" ]; then
        download
    elif [ "$1" == "install" ] || [ "$1" == "brew" ]; then
        brew_install_everything
    else
        dotfiles_help
    fi
}

brew linkapps
main "$1"

# install files
# install apps
# uninstall files
# uninstall apps
