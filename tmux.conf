# bind-key 'C-b' send-prefix
bind 'C-b' resize-pane -Z

set-option -g default-shell $SHELL
set-option -g default-command "reattach-to-user-namespace -l $(echo $SHELL)"

setw -g mode-keys vi
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"

#bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
#
# set-option -g default-command "reattach-to-user-namespace -l $SHELL"

# bind-key ' ' last-window
# bind-key s last-window
#
# # Default termtype. If the rcfile sets $TERM, that overrides this value.
# set -g default-terminal 'screen-256color'
#
# bind = select-layout even-horizontal
# bind + select-layout even-vertical
#
# # start window numbers at 1 to match keyboard order with tmux window order
set -g base-index 1
set-window-option -g pane-base-index 1
#
# # renumber windows sequentially after closing any of them
set -g renumber-windows on
#
# # # mouse enabled
set -g mouse on
# # set -g mode-mouse on
# # set -g mouse-select-window on
# # set -g mouse-select-pane on
# # set -g mouse-resize-pane on
# # bind -n WheelUpPane copy-mode
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M
#
#
# # Smart pane switching with awareness of vim splits
# is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
# bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
# bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
# bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
# bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
# bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
#
# # Keep your finger on ctrl, or don't
# # bind-key ^D detach-client
#
# # Pane resize in all four directions using vi bindings.
# # Can use these raw but I map them to shift-ctrl-<h,j,k,l> in iTerm.
# bind -r H resize-pane -L 5
# bind -r J resize-pane -D 5
# bind -r K resize-pane -U 5
# bind -r L resize-pane -R 5
#
# # Use vi keybindings for tmux commandline input.
# # Note that to get command mode you need to hit ESC twice...
# set -g status-keys vi
#
set -g status-keys emacs # me just now
#
# # Use vi keybindings in copy and choice modes
#  setw -g mode-keys vi
#
# # easily toggle synchronization (mnemonic: e is for echo)
# # sends input to all panes in a given window.
# bind e setw synchronize-panes on
# bind E setw synchronize-panes off
#
# ## color scheme (styled as vim-powerline)
# set -g status-left-length 52
# set -g status-right-length 451
# set -g status-fg white
# set -g status-bg colour234
# set -g pane-border-fg colour245
# set -g pane-active-border-fg colour39
# set -g message-fg colour16
# set -g message-bg colour221
# set -g message-attr bold
#
# ## jellybean colourscheme
set -g status-bg 'colour233'
set -g message-command-fg 'colour145'
set -g status-justify 'left'
set -g status-left-length '100'
set -g status 'on'
set -g pane-active-border-fg 'colour25'
set -g message-bg 'colour236'
set -g status-right-length '100'
set -g status-right-attr 'none'
set -g message-fg 'colour145'
set -g message-command-bg 'colour236'
set -g status-attr 'none'
# set -g status-utf8 'on'
set -g pane-border-fg 'colour236'
set -g status-left-attr 'none'
setw -g window-status-fg 'colour240'
setw -g window-status-attr 'none'
setw -g window-status-activity-bg 'colour233'
setw -g window-status-activity-attr 'none'
setw -g window-status-activity-fg 'colour25'
setw -g window-status-separator ''
setw -g window-status-bg 'colour233'
set -g status-left '#[fg=colour195,bg=colour25,bold] #S #[fg=colour25,bg=colour233,nobold,nounderscore,noitalics]'
set -g status-right '#[fg=colour233,bg=colour233,nobold,nounderscore,noitalics]#[fg=colour240,bg=colour233] #(tmux-mem-cpu-load 2) '
setw -g window-status-format '#[fg=colour233,bg=colour233,nobold,nounderscore,noitalics]#[default] #I:#W #[fg=colour233,bg=colour233,nobold,nounderscore,noitalics]'
setw -g window-status-current-format '#[fg=colour233,bg=colour236,nobold,nounderscore,noitalics]#[fg=colour145,bg=colour236] #I:#W #[fg=colour236,bg=colour233,nobold,nounderscore,noitalics]'
#
# # set -g window-status-format "#[fg=colour235,bg=colour252,bold] #I #W "
#
# # Patch for OS X pbpaste and pbcopy under tmux.
# # set-option -g default-command "which reattach-to-user-namespace > /dev/null &&
# # reattach-to-user-namespace -l $SHELL || $SHELL"
#
# # No escape time for vi mode
# set -sg escape-time 0
# # Bigger history
set -g history-limit 10000
#
# # Pretend our terminal doesn't support alternative screens, and thus all text
# # should be placed into the scrollback buffer when it goes off the top of the
# # screen.
# # http://superuser.com/questions/310251/use-terminal-scrollbar-with-tmux
# set-option -ga terminal-overrides ',xterm*:smcup@:rmcup@'
#
# # More intuitive pane splitting key-bindings, open all in current path
# bind-key - split-window -v  -c '#{pane_current_path}'
# bind-key h split-window -v  -c '#{pane_current_path}'
# bind-key C-h split-window -v  -c '#{pane_current_path}'
# bind-key \ split-window -h  -c '#{pane_current_path}'
# bind-key v split-window -h  -c '#{pane_current_path}'
# bind-key C-v split-window -h  -c '#{pane_current_path'
#
# bind-key a new-window -c '#{pane_current_path}'
#
# # bind-key b break-pane -d
# bind-key C-j choose-tree # lets you swap between tmux sessions
#
# # Easy reloading of the tmux.conf configuration file
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"
#
# # # smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"
#
# # Restore clear screen keybind mapped over by tmux-navigator
# bind C-l send-keys C-l
#
# # Use emacs / readline key-bindings in the tmux command prompt
set-option -g status-keys "emacs"
#
# # Allow the session name in status left to display up to 50 characters
# set-option -g status-left-length 50
#
# # More useful status-right with battery percentage and nicely formated datetime
# set -g status-right "#(date '+%a, %b %d - %I:%M') "
#
# # Setup 'v' to begin selection as in Vim
# bind-key -t vi-copy v begin-selection
# bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
#
# # Update default binding of `Enter` to also use copy-pipe
# unbind -t vi-copy Enter
# bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
#
# # Fuzzy matching session navigation via fzf utility
# # bind C-j split-window -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"
#
# # Prompted join-pane
# bind-key j command-prompt -p "join pane from: "  "join-pane -h -s '%%'"
# # send To
# bind-key t command-prompt -p "send pane to: "  "join-pane -h -t '%%'"
# # Easily sWap a pane (targeted by pane number) with the current pane
# bind-key w display-panes\; command-prompt -p "pane #: "  "swap-pane -t '%%'"
#
# # Re order windows - Ctrl + Shift && <- or ->
bind-key -n C-S-Left swap-window -t -1
bind-key -n C-S-Right swap-window -t +1
#
# ###################### bind-key h resize-pane -Z
#
# bind-key c copy-mode
