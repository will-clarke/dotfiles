# Prefix = C-\
# unbind-key C-b
# set -g prefix 'C-\'

# Last windo = C-\ twice
# bind-key 'C-\' send-prefix
# bind 'C-\' last-window
bind-key 'C-b' send-prefix
bind 'C-b' last-window

# Sample quick-pane configurations
# bind-key h split-window -h "htop"
# bind-key t split-window -h -c ~/ "vim todo.md"
# bind-key w split-window -h -c ~/my-wiki "vim +CtrlP"

# Default termtype. If the rcfile sets $TERM, that overrides this value.
set -g default-terminal 'screen-256color'

# unbind r
bind r source-file ~/.tmux.conf

bind = select-layout even-horizontal
bind + select-layout even-vertical

# start window numbers at 1 to match keyboard order with tmux window order
set -g base-index 1
set-window-option -g pane-base-index 1

# renumber windows sequentially after closing any of them
set -g renumber-windows on

# soften status bar color from harsh green to light gray
set -g status-bg '#666666'
set -g status-fg '#aaaaaa'

# remove administrative debris (session name, hostname, time) in status bar
# set -g status-left ''
# set -g status-right ''

# mouse enabled
set -g mode-mouse on
set -g mouse-select-window on
set -g mouse-select-pane on

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Keep your finger on ctrl, or don't
bind-key ^D detach-client

# # Create splits and vertical splits
# bind-key v split-window -h
# bind-key ^V split-window -h
# bind-key s split-window
# bind-key ^S split-window

# Pane resize in all four directions using vi bindings.
# Can use these raw but I map them to shift-ctrl-<h,j,k,l> in iTerm.
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Use vi keybindings for tmux commandline input.
# Note that to get command mode you need to hit ESC twice...
# set -g status-keys vi

# Use vi keybindings in copy and choice modes
setw -g mode-keys vi

# easily toggle synchronization (mnemonic: e is for echo)
# sends input to all panes in a given window.
bind e setw synchronize-panes on
bind E setw synchronize-panes off

# color scheme (styled as vim-powerline)
set -g status-left-length 52
set -g status-right-length 451
set -g status-fg white
set -g status-bg colour234
set -g pane-border-fg colour245
set -g pane-active-border-fg colour39
set -g message-fg colour16
set -g message-bg colour221
set -g message-attr bold

set -g window-status-format "#[fg=colour235,bg=colour252,bold] #I #W "

# Patch for OS X pbpaste and pbcopy under tmux.
# set-option -g default-command "which reattach-to-user-namespace > /dev/null &&
# reattach-to-user-namespace -l $SHELL || $SHELL"

# No escape time for vi mode
set -sg escape-time 0
# Bigger history
set -g history-limit 10000

# Pretend our terminal doesn't support alternative screens, and thus all text
# should be placed into the scrollback buffer when it goes off the top of the
# screen.
# http://superuser.com/questions/310251/use-terminal-scrollbar-with-tmux
set-option -ga terminal-overrides ',xterm*:smcup@:rmcup@'

# More intuitive pane splitting key-bindings, open all in current path
bind-key - split-window -v  -c '#{pane_current_path}'
bind-key \ split-window -h  -c '#{pane_current_path}'
bind c new-window -c '#{pane_current_path}'

# bind-key b break-pane -d
bind-key C-j choose-tree # lets you swap between tmux sessions

# Easy reloading of the tmux.conf configuration file
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# # smart pane switching with awareness of vim splits
# bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
# bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
# bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
# bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
# bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# Restore clear screen keybind mapped over by tmux-navigator
bind C-l send-keys C-l

# Use emacs / readline key-bindings in the tmux command prompt
set-option -g status-keys "emacs"

# Allow the session name in status left to display up to 50 characters
set-option -g status-left-length 50

# More useful status-right with battery percentage and nicely formated datetime
set -g status-right "#(battery -t -g black)  #(date '+%a, %b %d - %I:%M') "

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# Fuzzy matching session navigation via fzf utility
# bind C-j split-window -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"

# Prompted join-pane
# bind-key j command-prompt -p "join pane from: "  "join-pane -h -s '%%'"

# Easily swap a pane (targeted by pane number) with the current pane
bind-key s display-panes\; command-prompt -p "pane #: "  "swap-pane -t '%%'"

# "break session" and "kill session" without exiting tmux
# bind-key C-b send-keys 'tat && exit' 'C-m'
# bind-key K run-shell 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux kill-session'

# Re order windows - Ctrl + Shift && <- or ->
bind-key -n C-S-Left swap-window -t -1
bind-key -n C-S-Right swap-window -t +1
